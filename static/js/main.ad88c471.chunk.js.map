{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SeachBox.js","containers/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","index","Scroll","props","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasErrors","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,0BAAsDG,IAAI,UAClE,gCACI,6BAAKL,IACL,4BAAIC,WCQLK,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC,EAAD,CAA6BR,GAAIK,EAAOG,GAAOR,GAAIF,KAAMO,EAAOG,GAAOV,KAAMC,MAAOM,EAAOG,GAAOT,OAAvFM,EAAOG,GAAOR,UCIrCS,G,MAVA,SAAAC,GACX,OACI,qBAAKT,UAAU,aAAf,SACKS,EAAMC,aCIJC,EARG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKb,UAAU,MAAf,SACI,uBAAOA,UAAU,mCAAmCc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCkBrGI,E,kDApBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,WAAW,GAHL,E,qDAOd,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,WAAW,M,oBAG/B,WACI,OAAIG,KAAKJ,MAAMC,UACJ,mDAEAG,KAAKb,MAAMC,a,GAhBHc,aCqDZC,G,wDA7CX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEX,YAAae,EAAMC,OAAOC,SAd1C,EAAKX,MAAQ,CACTd,OAAQ,GACRQ,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBkB,MAAM,+CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEnB,OAAQ8B,S,oBAU/C,WACI,MAAgCZ,KAAKJ,MAA7Bd,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,YACVuB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS3B,EAAY0B,kBAEzD,OAAsB,IAAlBlC,EAAOoC,OACA,yCAGH,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,eAAC,EAAD,WACI,cAAC,EAAD,CAAWa,aAAcS,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUtB,OAAQ+B,gB,GArC5BX,cCIHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad88c471.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200&set=set5`} alt='robot' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, index) => {\r\n                    return <Card key={robots[index].id} id={robots[index].id} name={robots[index].name} email={robots[index].email} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport './Scroll.css'\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div className='div-scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            hasErrors: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasErrors: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasErrors) {\r\n            return <h1>OOOOOPS,thats bad</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SeachBox'\r\nimport ErrorBoundry from './ErrorBoundry'\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(' https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc' >\r\n                    <h1 className='f1'>robofriends</h1>\r\n                    <ErrorBoundry>\r\n                        <SearchBox searchChange={this.onSearchChange} />\r\n                        <Scroll>\r\n                            <CardList robots={filteredRobots} />\r\n                        </Scroll>\r\n                    </ErrorBoundry>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}